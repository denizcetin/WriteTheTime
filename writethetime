#!/bin/bash

## Temel Fonksiyonlar

# Sistem Saatinin Gerekli Değişkenlere Atamasını Yapan Fonksiyon
# Zaman Bilgisini "Saat:Dakika" şeklinde alıp değişkenlere ataması yapılıyor.
function sistemZamani {							
	sistem_tarihi=`date +"%T" | awk -F ":" '{print $1":"$2}'`
	sistem_saati=`echo $sistem_tarihi | awk -F ":" '{print $1}'`
	sistem_dakikasi=`echo $sistem_tarihi | awk -F ":" '{print $2}'`
}

# Gelen Değişken Sayı mı değil mi test eden fonksiyon
# "1" adet değişken/parametre alır
# Gelen parametre sayıysa "evet" değilse "hayır" yazdırır
function sayiMi {
	yournumber="$1"
	# sayı için doku
	re='^[0-9]+$'
	if ! [[ $yournumber =~ $re ]] ; then
		echo "hayır"
	else
		echo "evet"
	fi
}
	
# Gönderilen Sayının Önündeki Sıfırlarını atan fonksiyon
# Parametre olarak saat veya dakika alır.
function sifiriniAt {
	echo "$((10#$1))"
}

# Öğlen Akşam İkindi Sabah Gece gibi kavramları hesaplayan fonksiyon
function gunHesapla {
	local saat=$1
	case "$saat" in
		0)
			echo "(Gece yarısı)" ;;
		1|2|3|4)
			echo "(Gece)" ;;
		5|6|7|8|9)
			echo "(Sabah)" ;;
		10|11)
			echo "(Öğleden Önce)" ;;
		12|13)
			echo "(Öğleyin)" ;;
		14|15)
			echo "(İkindi)" ;;
		16|17|18|19)
			echo "(Akşamüstü)" ;;
		20|21|22|23)
			echo "(Akşam)" ;;
	esac
}

# Saat bişey'i bişey geçiyor larda ki sayılara gelecek ekleri hesaplayan fonksiyon
# Parametre olarak saat alır.
function geceEkiniHesapla {
	local saat=$1
	case "$saat" in
		1|5|8|11|13|17|20|23)
			geceEki="'i" ;;
		2|7|12|14|19|0)
			geceEki="'yi" ;;
		6|18)
			geceEki="'yı" ;;
		3|4|15|16)
			geceEki="'ü" ;;
		9|10|21|22)
			geceEki="'u" ;;
	esac
	echo "$geceEki"
}

# Saat bişey'e bişey var larda ki sayılara gelecek ekleri hesaplayan fonksiyon
# Parametre olarak saat alır.
function kalaEkiniHesapla {
	local saat=$1
	case "$saat" in
		1|3|4|5|8|11|13|15|16|17|20|23)
			kalaEki="'e" ;;
		2|7|12|14|19|0)
			kalaEki="'ye" ;;
		6|18)
			kalaEki="'ya" ;;
		9|10|21|22)
			kalaEki="'a" ;;
	esac
	echo "$kalaEki"
}

# Saati yazıya çeviren fonksiyon
# Parametre olarak saat alır.
function saatiYaziyaCevir {
	local saat=$1
	array=("Bir" "İki" "Üç" "Dört" "Beş" "Altı" "Yedi" "Sekiz" "Dokuz" "On" "On Bir" "On İki")
	indis=$(($saat % 12))
	indis=$[$indis-1]
	saatyazi=${array[$indis]}
	echo "$saatyazi"
}

# Dakikayı yazıya çeviren fonksiyon
# Parametre olarak dakika alır.
function dakikayiYaziyaCevir {
	local dakika=$1
	#echo "$dakika"
	# Sıfırları attığımız için eğer dakika nın ilk basamağı sıfır ise dakika gerçekten sıfırdır.
	if [ "$dakika" -eq 0 ] ; then
		dakikayazi="Sıfır"
	# Dakika Tek Basamaklı Demektir.
	elif [ "${dakika:1:1}" = "" ] ; then
		dakika_tek_basamak=("Bir" "İki" "Üç" "Dört" "Beş" "Altı" "Yedi" "Sekiz" "Dokuz")
		indis=${dakika:0:1}
		indis=$[$indis-1]
		dakikayazi=${dakika_tek_basamak[$indis]}
	# Dakika Çift Basamaklı Demektir
	else
		dakika_ilk_basamak=("On" "Yirmi" "Otuz" "Kırk" "Elli")
		indis=${dakika:0:1}
		indis=$[$indis-1]
		dakika1=${dakika_ilk_basamak[$indis]}
		dakika_ikinci_basamak=("" "Bir" "İki" "Üç" "Dört" "Beş" "Altı" "Yedi" "Sekiz" "Dokuz")
		indis=${dakika:1:1}
		dakika2=${dakika_ikinci_basamak[$indis]}
		dakikayazi="$dakika1 $dakika2"
	fi
	echo "$dakikayazi"
}

# Dakikayı yaklaşık yazıya çeviren fonksiyon
# Parametre olarak dakika alır.
function dakikayiYaklasikYaziyaCevir {
	local dakika=$1
	case $dakika in
		[4-7]|5[3-6]) echo "Beş" ;;
		[8-9]|1[0-2]|4[9]|5[0-2]) echo "On" ;;
		1[3-7]|4[3-8]) echo "Çeyrek" ;;
		1[8-9]|2[0-2]|3[8-9]|4[0-2]) echo "Yirmi" ;;
		2[3-6]|3[4-7]) echo "Yirmi Beş" ;;
		*) 
			echo ""
	esac
}
## Gelişmiş Fonksiyonlar

# Deneysel Zaman için girilen zamanın geçerliliğini kontrol eden fonksiyon
# Parametre olarak sırasıyla saat ve dakika alınır. Alınan saat ve dakika
# geçerliyse "1" geçerli değilse "0" döndürür.
function zamanKontrol {
	# Öncelikle gelen parametreleri local değişkenlere ata
	local saat=$1
	local dakika=$2
	
	# Not! Saatin ve Dakikanın "sayı" olduğunu doğrulamadan sıfırlarını atmaya çalışma, sayı değilse hata alırsın.
	
	if [[ "$(sayiMi $saat)" = "evet" && "$(sayiMi $dakika)" = "evet" ]] ; then
		# Belirtilen aralıklara uyuorsa - saat ve dakika sayı cinsinden demektir.
		saat=$(sifiriniAt $saat)
		dakika=$(sifiriniAt $dakika)
		
		#
		if [[ "$saat" -ge 0 && "$saat" -le 23 && "$dakika" -ge 0 && "$dakika" -le 59 ]] ; then
			# saat ve sayı zaman formatına uyuyor demektir. 0<saat<24 0<dakika<60
			return 1
		else
			return 0
		fi
	else
		echo "aaaaa"
		return 0
	fi
}

# Parametre geldiyse deneysel saati, parametre gelmediyse sistem saatini
# Gerekli Değişkenlere Atıyor.
function saatiAyarla {
	# Sistem Zamanını $sistem_saati ve $sistem_dakikasi değişkenlerine aktar.
	sistemZamani
	
	# Sistem Saatini (Sayıyla) Ekrana Yazdır. (Karşılaştırma ve Kontrol Amaçlı)
	echo "Sistem Saati => ${sistem_saati}:${sistem_dakikasi}"
		
	if [[ "$#" -eq 0 ]] ; then
		# Parametre yoksa - Sistem Zamanı Kullanılacak Demek.
		
		# Sistem Saatinin ve Sistem Dakikasının Gereksiz Sıfırlarını at ve
		# $temiz_saat ve $temiz_dakika değişkenlerine aktar.
		# Artık her fonksiyonda sifiriniAt fonksiyonu kullanmaya gerek kalmayacak.
		temiz_saat=$(sifiriniAt $sistem_saati)
		temiz_dakika=$(sifiriniAt $sistem_dakikasi)

	else 
		# Parametre Sayısı Sıfır Değilse - Deneysel Zaman Kullanılacak Demek.
		
		# Gelen Paramatreleri $deneysel_saat ve $deneysel_dakika değişkenlerine ata
		deneysel_saat=$1
		deneysel_dakika=$2
		
		# Zamanın geçerli olup olmadığı kontrol edilir.
		zamanKontrol $deneysel_saat $deneysel_dakika
		
		# zamanKontrol fonksiyonunun geri dönüş değeri
		return_for_zamanKontrol=$?
		
		if [[ "$return_for_zamanKontrol" -eq 1 ]] ; then
			# Girilen zaman geçerliyse
			
			# Girilen Deneysel Saatin ve Deneysel Dakikanın
			# Gereksiz Sıfırlarını at ve
			# $temiz_saat ve $temiz_dakika değişkenlerine aktar.
			temiz_saat=$(sifiriniAt $deneysel_saat)
			temiz_dakika=$(sifiriniAt $deneysel_dakika)
		else
			echo "Girilen Zaman Geçerli Bir Zaman Değildir." 
			echo "Lütfen Geçerli Bir zaman belirterek programı tekrar çalıştırın."
			exit
		fi
	fi
	# Temizlenen Saati ve Dakikayı Ekrana Yazdır (Kontrol Amaçlı)
	echo "Kullanılacak Saat => ${temiz_saat}:${temiz_dakika}"
}

## Ana Fonksiyonlar

# Saati Yaklaşık Olarak Hesaplayan Fonksiyon
# Parametre olarak saat ve dakika alır.
# Bu fonksiyon düzenlenecek!
function yaklasikSaat {
	local saat=$1
	local dakika=$2
	
	case $dakika in 
		[0-3])
			onek="Tam" ; ek="" ;;
		5[7-9])
			saat=$[$saat + 1] ; onek="Tam" ; ek="" ;;
		2[7-9]|3[0-3])
			ek=" Buçuk" ;;
		*)
			if [[ "$dakika" -ge 4 && "$dakika" -le 26 ]] ; then
				ek=$(geceEkiniHesapla $saat)
				sonek="Geçiyor."
			elif [[ "$dakika" -ge 34 && "$dakika" -le 56 ]] ; then
				saat=$[$saat + 1]
				if [ "$saat" -eq 24 ] ; then
					saat=0
				fi
				ek="$(kalaEkiniHesapla $saat)"
				sonek="Var."
			fi
	esac
	echo "Yaklaşık Saat => $(gunHesapla $saat) ${onek} $(saatiYaziyaCevir $saat)${ek} $(dakikayiYaklasikYaziyaCevir $dakika) $sonek"
}

# Saati Tam Değeriyle Yazıyla Yazan Fonksiyon
# Parametre olarak saat ve dakika alır.
function normalSaat {
	local saat=$1
	local dakika=$2
	ek=$(geceEkiniHesapla $saat)
	
	# Dakikayı Yazıya Çevirdik
	dakikayazi=$(dakikayiYaziyaCevir $2)
	
	echo "Normal Saat => $(gunHesapla $saat) $(saatiYaziyaCevir $saat)$ek $(dakikayiYaziyaCevir $dakika) Geçiyor."
}

# -m parametresi için tasarlanan menü'yü getiren fonksiyon
function menu {
	options=("Normal Saat" "Yaklaşık Saat" "Deneysel Saat" "Çıkış Yap")
	select opt in "${options[@]}" ; do
		case $opt in
			"Normal Saat")
				saatiAyarla
				normalSaat $temiz_saat $temiz_dakika
				;;
			"Yaklaşık Saat")
				saatiAyarla
				yaklasikSaat $temiz_saat $temiz_dakika 
				;;
			"Deneysel Saat")
				echo "Saati Girin (00-23)"
				read saat
				echo "Dakikayı Girin (00-59)"
				read dakika
				echo "Deneysel Saat"
				saatiAyarla $saat $dakika
				normalSaat $temiz_saat $temiz_dakika 
				yaklasikSaat $temiz_saat $temiz_dakika
				;;
			"Çıkış Yap")
				echo "Çıkış Yapıldı"
				  
				break
				;;
			*)
				echo ; echo "Hatalı Seçim"
				echo "Devam Etmek İçin bir tuşa basın" ; read -n1 kbd       
				menu
				break
				;;
		esac                     
	done
}

# Bu case programa verilen parametre sayısı üzerinden işlem yapar.
# parametre yoksa normal saati yazıyla verir.
# parametre sayısı 1 "bir" ise ve parametre -y ise saati yaklaşık olarak verir.
# parametre sayısı 1 "bir" ise ve parametre -m ise menü'yü ekrana verir.
# parametre sayısı 3 "üç" ise ve parametre -d saat dakika şeklinde (formatında) ise bu girilen saat dakika değerine göre işlem yapılır.

# Fonksiyonlara Gönderilen/Gönderilecek olan tüm zaman birimleri gereksiz
#	(yani sayıların önündeki) sıfırlardan arındırılmış olmalı. 
#	Çünkü bir sayının önünde sıfır olduğunda bash bunu hexedecimal sayı
#	olarak adlandırıyor.

# saatiAyarla fonksiyonundan sonra $temiz_saat ve $temiz_dakika değişkenleri sıfırlardan alınmış dakika ve saati tutar.
# Dolayısıyla tüm ana fonksiyonlardan önce saatiAyarla fonksiyonu çalıştırılmalı ve parametre olarak temiz değişkenler gönderilmelidir.

case "$#" in
	0)	
		#Parametre sayısı 0 "sıfır" ise (Parametre Yoksa)
		saatiAyarla
		normalSaat $temiz_saat $temiz_dakika
		;;
	1) # Parametre sayısı 1 "bir" ise
		saatiAyarla
		if [ "$1" = "-y" ] ; then
			# parametre "-y" ise
			yaklasikSaat $temiz_saat $temiz_dakika 
		elif [ "$1" = "-m" ] ; then
			menu
		else
			# parametre "-y" değilse
			echo "Hatalı Parametre Girdiniz"
			exit
		fi
		;;
	3) # Parametre sayısı 3 "üç" ise
		if [ "$1" = "-d" ] ; then
			# ilk parametre "-d" ise
			saatiAyarla $2 $3
			normalSaat $temiz_saat $temiz_dakika 
			yaklasikSaat $temiz_saat $temiz_dakika
		else  
			# ilk parametre "-d" değilse
			echo "Hatalı Parametre Girdiniz"
			exit
		fi
		;;
	*)
		echo "Hatalı Parametre Girdiniz"
		exit
		;;
esac
